default_platform(:android)

platform :android do
  desc "Release a new version to Google Play"
  lane :release do
    gradle(task: "clean bundleRelease")
    upload_to_play_store(
        track: "beta"
    )
  end

  desc "Creates a release that only has libraries.json changes. Automatically increments versionCode and versionName"
  lane :release_library_updates do
    libraries = download(url: "#{ENV["LIBRARIES_ENDPOINT"]}")

    libraries.each { |h| 
      h.delete("createdAt") 
    }

    libraries.each { |h| 
      h.delete("updatedAt") 
    }

    libraries.sort_by! { |k| k["name"] }

    File.open("../app/src/main/res/raw/libraries.json", "w") { |file| file.puts libraries.to_json }

    has_changes = sh("git status -s | egrep \"libraries.json\" | wc -l")

    if has_changes.to_i > 0
      sh("git config --global user.email \"#{ENV["GIT_USER_EMAIL"]}\"")
      sh("git config --global user.name \"#{ENV["GIT_USER_NAME"]}\"")
      branch_name = "release-#{increment_version}"
      sh("git checkout -b #{branch_name}")
      git_commit(path: "*/libraries.json", message: "Update libraries.json with up-to-date libraries to scan.")
      git_commit(path: "*/build.gradle", message: "Update versionCode and versionName")
      sh("git push origin #{branch_name}")

      create_pull_request(
        api_token: "#{ENV["GITHUB_PR_TOKEN"]}",
        repo: "#{ENV["CIRCLE_PROJECT_USERNAME"]}/#{ENV["CIRCLE_PROJECT_REPONAME"]}",
        title: "Library Update Release",
        body: "Automatic PR from CircleCI to update list of libraries to scan for in Detective Droid and create a new release to Google Play beta.",
        base: "main",
        head: "#{branch_name}"
      )
    end
  end
end

desc "Incremements versionCode by 1 and versionName patch version by 1"
private_lane :increment_version do
  # Get current version information
  build_gradle_file = "../app/build.gradle"
  version_name_grep = "egrep '^[[:blank:]]+versionName[[:blank:]]'  #{build_gradle_file}"
  version_code_grep = "egrep '^[[:blank:]]+versionCode[[:blank:]]'  #{build_gradle_file}"

  version_name = `#{version_name_grep} | awk '{print $2}'`
  version_code = `#{version_code_grep} | awk '{print $2}'`

  # Update to next patch version since this is a library update release
  version_split = version_name.split('.')
  new_patch_version = version_split.last.to_i + 1
  version_split[2] = new_patch_version
  
  new_version_name = version_split.join('.') + "\""
  new_version_code = version_code.to_i + 1

  # Write next version information to file
  build_gradle = File.read("#{build_gradle_file}")
  new_build_gradle = build_gradle.gsub("versionCode #{version_code}", "versionCode #{new_version_code}\n")
  new_build_gradle = new_build_gradle.gsub("versionName #{version_name}", "versionName #{new_version_name}\n")

  File.open("#{build_gradle_file}", "w") {|file| file.puts new_build_gradle }

  new_version_name.delete('"')
end
